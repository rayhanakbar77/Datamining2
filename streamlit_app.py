# -*- coding: utf-8 -*-
"""PrediksiKinerjamhs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JMRgW9pereZE-JxDuhyDPsuXO8MaXm68
"""

import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt

import os,zipfile

dataset_dir = 'dataset'

target_file = 'student-study-performance.zip'

extracting = zipfile.ZipFile(target_file, 'r')
extracting.extractall(dataset_dir)
extracting.close()

df = pd.read_csv(f'{dataset_dir}/study_performance.csv')

df.head()

df.info()

df.shape

df.describe()

df.isnull().sum()

# Check Duplicates
df.duplicated().sum()

df.head()

df = df.rename(columns = {df.columns[1] : 'group',
                         df.columns[2] : 'parent_education_Level',
                         df.columns[4] : 'test_preparation'})

df['total_score'] = df['math_score'] + df['reading_score'] + df['writing_score']
df['mean_score'] = round(df['total_score'] / 3,1)

df.head()

numeric_cols = df.select_dtypes(include = ['int64','double']).columns
object_cols = df.select_dtypes(exclude = ['int64','double']).columns

f, ax = plt.subplots(5,1, figsize=(15, 15))
ax = ax.flatten()

for index, cols in enumerate(numeric_cols):
    sns.histplot(data= df, x= cols, ax = ax[index],kde=True)
    ax[index].set_title(cols)

plt.tight_layout()
plt.show()

f, ax = plt.subplots(5,1, figsize=(15, 15))
ax = ax.flatten()

for index, cols in enumerate(numeric_cols):
    sns.boxplot(data= df, x = cols, ax = ax[index])
    ax[index].set_title(cols)

plt.tight_layout()
plt.show()

f, ax = plt.subplots(5,1, figsize=(15, 20))
ax = ax.flatten()

for index, cols in enumerate(object_cols):
    sns.countplot(data= df, x= cols, ax = ax[index])
    ax[index].set_title(cols)


plt.tight_layout()
plt.show()

f, ax = plt.subplots(5,1, figsize=(15, 30))
ax = ax.flatten()

for index, cols in enumerate(numeric_cols):
    sns.boxplot(data= df, x = 'group', y = cols, ax = ax[index])
    ax[index].set_title(cols)

plt.tight_layout()
plt.show()

f, ax = plt.subplots(5,1, figsize=(15, 30))
ax = ax.flatten()

for index, cols in enumerate(numeric_cols):
    sns.boxplot(data= df, x = 'gender', y = cols, ax = ax[index])
    ax[index].set_title(cols)

plt.tight_layout()
plt.show()

sns.heatmap(df[numeric_cols].corr(),annot=True,cmap='Reds')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, r2_score

def Data_transform(df):
    df = df.drop(['parent_education_Level'], axis=1)
    df['gender'] = df['gender'].map({'male': 1, 'female': 0})
    df['group'] = df['group'].map({'group A': 1,'group B': 2,'group C': 3,'group D': 4,'group E': 5})
    df['lunch'] = df['lunch'].map({'standard':1, 'free/reduced': 0})
    df['test_preparation'] = df['test_preparation'].map({'none':0 , 'completed':1})

    return df

df = Data_transform(df)

X = df.drop(columns=['math_score'],axis=1)
y = df['math_score']

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)

LR = LinearRegression()

LR.fit(X_train, y_train)

pred_lr = LR.predict(X_test)

print(f'MAE : {mean_absolute_error(y_test,pred_lr)}')
print(f'MSE : {mean_squared_error(y_test,pred_lr)}')
print(f'r2_score : {r2_score(y_test,pred_lr)}')

plt.scatter(y_test,pred_lr)
plt.show()
